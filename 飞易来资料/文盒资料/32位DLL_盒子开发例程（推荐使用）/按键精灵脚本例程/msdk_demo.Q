[General]
SyntaxVersion=2
BeginHotkey=121
BeginHotkeyMod=0
PauseHotkey=0
PauseHotkeyMod=0
StopHotkey=123
StopHotkeyMod=0
RunOnce=1
EnableWindow=
MacroID=bdfe1ff9-8832-4a5a-8b74-821337a1b2fb
Description=msdk演示
Enable=0
AutoRun=1
[Repeat]
Type=0
Number=1
[SetupUI]
Type=1
QUI=Form1
[Relative]
SetupOCXFile=
[Comment]

[UIPackage]
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


[Script]
//!!!!!!!!!请从第312行开始编写您的程序，312行以前的代码是接口定义和按键值定义!!!!!!!
//注意：由于按键精灵不支持ByRef，无法调用msdk中的M_GetCurrMousePos/M_GetCurrMousePos2接口。请使用M_GetCurrMousePosX/M_GetCurrMousePosY接口
'■■■■■■■■■■■■■■■■■■■■↓通用接口↓■■■■■■■■■■■■■■■■■■■■
//打开端口获取句柄，程序启动后只需打开一次端口就可以
Declare Function M_Open Lib "msdk.dll" (ByVal portname As Long) As Long
//打开指定vid pid的单头盒子或者双头盒子的主控端。必须保证电脑上只插有一个这种盒子。
Declare Function M_Open_VidPid Lib "msdk.dll" (ByVal Vid As Long, ByVal Pid As Long) As Long
//关闭端口；在程序退出前再关闭端口
Declare Function M_Close Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//获取设备序列号
Declare Function M_GetDevSn Lib "msdk.dll" (ByVal m_hdl As Long, ByRef dwp_LenResponse As Long, ByRef ucp_Response As Byte) As Long
//写用户数据
Declare Function M_SetUserData Lib "msdk.dll" (ByVal m_hdl As Long, ByVal dw_LenUserData As Long, ByVal ucp_UserData As String) As Long
//验证用户数据
Declare Function M_VerifyUserData Lib "msdk.dll" (ByVal m_hdl As Long, ByVal dw_LenUserData As Long, ByVal ucp_UserData As String) As Long
//检查盒子是否是可修改盒子; 返回: 0:是可修改； 其他:不可修改
Declare Function M_ChkSupportMdy Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//设置新VID/PID
Declare Function M_SetNewVidPid Lib "msdk.dll" (ByVal m_hdl As Long, ByVal mVid As Long, ByVal mPid As Long, ByVal sVid As Long, ByVal sPid As Long) As Long
//复位VID/PID
Declare Function M_ResetVidPid Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//DLL内部参数恢复默认值
Declare Function M_InitParam Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//设置DLL内部参数
Declare Function M_SetParam Lib "msdk.dll" (ByVal m_hdl As Long, ByVal ParamType As Long, ByVal Param1 As Long, ByVal Param2 As Long) As Long
//延时指定时间
Declare Function M_Delay Lib "msdk.dll" (ByVal time As Long) As Long
//在指定的最小最大值之间延时随机时间
Declare Function M_DelayRandom Lib "msdk.dll" (ByVal Min_time As Long, ByVal Max_time As Long) As Long
//在指定的最小最大值之间延时随机时间
Declare Function M_RandDomNbr Lib "msdk.dll" (ByVal Min_V As Long, ByVal Max_V As Long) As Long
'■■■■■■■■■■■■■■■■■■■■↑通用接口↑■■■■■■■■■■■■■■■■■■■■
'■■■■■■■■■■■■■■■■■■■■↓键盘接口↓■■■■■■■■■■■■■■■■■■■■
//单击(按下后立刻弹起)指定按键
Declare Function M_KeyPress Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As integer, ByVal Nbr As integer) As Long
//按下指定按键不弹起，如果按下不弹起，可以和其他按键组成组合键
Declare Function M_KeyDown Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As Long) As Long
//弹起指定按键
Declare Function M_KeyUp Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As Long) As Long
//单击(按下后立刻弹起)指定按键
//读取按键状态  返回 0: 弹起状态；1:按下状态；-1: 失败(端口未打开)
Declare Function M_KeyState Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As Long) As Long
//单击(按下后立刻弹起)指定按键
Declare Function M_KeyPress2 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As integer, ByVal Nbr As integer) As Long
//按下指定按键不弹起，如果按下不弹起，可以和其他按键组成组合键
Declare Function M_KeyDown2 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As Long) As Long
//弹起指定按键
Declare Function M_KeyUp2 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As Long) As Long
//读取按键状态  返回 0: 弹起状态；1:按下状态；-1: 失败(端口未打开)
Declare Function M_KeyState2 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal KeyCode As Long) As Long
//弹起所有按键
Declare Function M_ReleaseAllKey Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//读取小键盘NumLock灯的状态 //返回 0:灭；1:亮；-1: 失败
Declare Function M_NumLockLedState Lib "msdk.dll" (ByVal m_hdl As Long) As Long
'读取CapsLock灯的状态 //返回 0:灭；1:亮；-1: 失败
Declare Function M_CapsLockLedState Lib "msdk.dll" (ByVal m_hdl As Long) As Long
'读取ScrollLock灯的状态 //返回 0:灭；1:亮；-1: 失败
Declare Function M_ScrollLockLedState Lib "msdk.dll" (ByVal m_hdl As Long) As Long
'输入一串ASCII字符串，如"ABCdef012,.<>"，在InputLen个字节内将忽略非ASCII字符，  //InputStr: 输入缓冲区首地址; 注意：不支持解析\n\r等转义字符！ InputLen:输出的长度
Declare Function M_KeyInputString Lib "msdk.dll" (ByVal m_hdl As Long, ByVal InputStr As String, ByVal InputLen As Long) As Long
'输入一串字符串，支持中文(GBK编码)英文混合，如"啊啊啊ABCdef012,.<>"，在InputLen个字节内将忽略非ASCII和中文字符，  //InputStr: 输入缓冲区首地址; 注意：不支持解析\n\r等转义字符！ InputLen:输出的长度
Declare Function M_KeyInputStringGBK Lib "msdk.dll" (ByVal m_hdl As Long, ByVal InputStr As String, ByVal InputLen As Long) As Long
'输入一串字符串，支持中文(Unicode编码)英文混合，如"啊啊啊ABCdef012,.<>"，在InputLen个字节内将忽略非ASCII和中文字符，  //InputStr: 输入缓冲区首地址; 注意：不支持解析\n\r等转义字符！ InputLen:输出的长度
Declare Function M_KeyInputStringUnicode Lib "msdk.dll" (ByVal m_hdl As Long, ByVal InputStr As String, ByVal InputLen As Long) As Long
'■■■■■■■■■■■■■■■■■■■■↑键盘接口↑■■■■■■■■■■■■■■■■■■■■
'■■■■■■■■■■■■■■■■■■■■↓鼠标接口↓■■■■■■■■■■■■■■■■■■■■
//左键单击   //Nbr: 左键在当前位置单击次数
Declare Function M_LeftClick Lib "msdk.dll" (ByVal m_hdl As Long, ByVal Nbr As Long) As Long
//左键双击   //Nbr: 左键在当前位置双击次数
Declare Function M_LeftDoubleClick Lib "msdk.dll" (ByVal m_hdl As Long, ByVal Nbr As Long) As Long
//按下左键不弹起
Declare Function M_LeftDown Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//弹起左键
Declare Function M_LeftUp Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//右键单击   //Nbr: 左键在当前位置单击次数
Declare Function M_RightClick Lib "msdk.dll" (ByVal m_hdl As Long, ByVal Nbr As Long) As Long
//按下右键不弹起
Declare Function M_RightDown Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//弹起右键
Declare Function M_RightUp Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//中键单击   //Nbr: 左键在当前位置单击次数
Declare Function M_MiddleClick Lib "msdk.dll" (ByVal m_hdl As Long, ByVal Nbr As Long) As Long
//按下中键不弹起
Declare Function M_MiddleDown Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//弹起中键
Declare Function M_MiddleUp Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//滚动鼠标滚轮;  Nbr: 滚动量,  为正,向上滚动；为负, 向下滚动;
Declare Function M_MouseWheel Lib "msdk.dll" (ByVal m_hdl As Long, ByVal Nbr As Long) As Long
//将鼠标移动到原点(0,0)  在出现移动出现异常时，可以用该函数将鼠标复位
Declare Function M_ResetMousePos Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//从当前位置移动鼠标    x: x方向（横轴）的距离（正:向右; 负值:向左）; y: y方向（纵轴）的距离（正:向下; 负值:向上）
Declare Function M_MoveR Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
//移动鼠标到指定坐标    x: x方向（横轴）的坐标; y: y方向（纵轴）的坐标。坐标原点(0, 0)在屏幕左上角
Declare Function M_MoveTo Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
//读取当前鼠标所在坐标  返回坐标在x、y中。 注意：该函数必须在执行一次MoveTo函数后才能正确执行！
Declare Function M_GetCurrMousePos Lib "msdk.dll" (ByVal m_hdl As Long, ByRef x As Long, ByRef y As Long) As Long
Declare Function M_GetCurrMousePosX Lib "msdk.dll" (ByVal m_hdl As Long) As Long
Declare Function M_GetCurrMousePosY Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//释放所有鼠标的按键
Declare Function M_ReleaseAllMouse Lib "msdk.dll" (ByVal m_hdl As Long) As Long
//读取鼠标左中右键状态   //MouseKeyCode: 1=左键 2=右键 3=中键  //返回 0: 弹起状态；1:按下状态；-1: 失败
//只能读取盒子中鼠标的状态，读取不到实体鼠标的状态
Declare Function M_MouseKeyState Lib "msdk.dll" (ByVal m_hdl As Long, ByVal MouseKeyCode As Long) As Long
////以下接口仅适用主控机和被控机是同一台电脑的使用方式(单头模块；双头模块的两个USB头都连接到同一台电脑)
////以下接口将调用系统的API来获取当前鼠标位置，DLL将不记录鼠标移动的位置
//从当前位置移动鼠标    x: x方向（横轴）的距离（正:向右; 负值:向左）; y: y方向（纵轴）的距离（正:向下; 负值:向上）
Declare Function M_MoveR2 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
//移动鼠标到指定坐标    x: x方向（横轴）的坐标; y: y方向（纵轴）的坐标。坐标原点(0, 0)在屏幕左上角
Declare Function M_MoveTo2 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
//读取当前鼠标所在坐标  返回坐标在x、y中。
Declare Function M_GetCurrMousePos2 Lib "msdk.dll" (ByRef x As Long, ByRef y As Long) As Long
//以下接口将使用绝对移动功能。该功能目前还不能支持安卓
//在使用绝对移动功能前，必须先输入被控机的屏幕分辨率
//x: x方向（横轴）的坐标; y: y方向（纵轴）的坐标。坐标原点(0, 0)在屏幕左上角
Declare Function M_ResolutionUsed Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
//将鼠标移动到指定坐标。绝对移动功能，鼠标移动到指定位置时，在某些坐标上最大会有±2的误差
//使用该接口后，可以调用M_GetCurrMousePos读取鼠标位置
Declare Function M_MoveTo3 Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
Declare Function M_MoveTo3_D Lib "msdk.dll" (ByVal m_hdl As Long, ByVal x As Long, ByVal y As Long) As Long
'■■■■■■■■■■■■■■■■■■■■↑鼠标接口↑■■■■■■■■■■■■■■■■■■■■
'■■■■■■■■■■■■■■■■■■■■↓按键定义↓■■■■■■■■■■■■■■■■■■■■
Dimenv Keyboard_a              // Keyboard a and A
Keyboard_a = 4
Dimenv Keyboard_b              // Keyboard b and B
Keyboard_b = 5
Dimenv Keyboard_c              // Keyboard c and C
Keyboard_c = 6
Dimenv Keyboard_d              // Keyboard d and D
Keyboard_d = 7
Dimenv Keyboard_e              // Keyboard e and E
Keyboard_e = 8
Dimenv Keyboard_f              // Keyboard f and F
Keyboard_f = 9
Dimenv Keyboard_g              // Keyboard g and G
Keyboard_g = 10
Dimenv Keyboard_h              // Keyboard h and H
Keyboard_h = 11
Dimenv Keyboard_i              // Keyboard i and I
Keyboard_i = 12
Dimenv Keyboard_j              // Keyboard j and J
Keyboard_j = 13
Dimenv Keyboard_k              // Keyboard k and K
Keyboard_k = 14
Dimenv Keyboard_l              // Keyboard l and L
Keyboard_l = 15
Dimenv Keyboard_m              // Keyboard m and M
Keyboard_m = 16
Dimenv Keyboard_n              // Keyboard n and N
Keyboard_n = 17
Dimenv Keyboard_o              // Keyboard o and O
Keyboard_o = 18
Dimenv Keyboard_p              // Keyboard p and P
Keyboard_p = 19
Dimenv Keyboard_q              // Keyboard q and Q
Keyboard_q = 20
Dimenv Keyboard_r              // Keyboard r and R
Keyboard_r = 21
Dimenv Keyboard_s              // Keyboard s and S
Keyboard_s = 22
Dimenv Keyboard_t              // Keyboard t and T
Keyboard_t = 23
Dimenv Keyboard_u              // Keyboard u and U
Keyboard_u = 24
Dimenv Keyboard_v              // Keyboard v and V
Keyboard_v = 25
Dimenv Keyboard_w              // Keyboard w and W
Keyboard_w = 26
Dimenv Keyboard_x              // Keyboard x and X
Keyboard_x = 27
Dimenv Keyboard_y              // Keyboard y and Y
Keyboard_y = 28
Dimenv Keyboard_z              // Keyboard z and Z
Keyboard_z = 29
Dimenv Keyboard_1              // Keyboard 1 and !
Keyboard_1 = 30
Dimenv Keyboard_2              // Keyboard 2 and @
Keyboard_2 = 31
Dimenv Keyboard_3              // Keyboard 3 and #
Keyboard_3 = 32
Dimenv Keyboard_4              // Keyboard 4 and $
Keyboard_4 = 33
Dimenv Keyboard_5              // Keyboard 5 and %
Keyboard_5 = 34
Dimenv Keyboard_6              // Keyboard 6 and ^
Keyboard_6 = 35
Dimenv Keyboard_7              // Keyboard 7 and &
Keyboard_7 = 36
Dimenv Keyboard_8              // Keyboard 8 and *
Keyboard_8 = 37
Dimenv Keyboard_9              // Keyboard 9 and (
Keyboard_9 = 38
Dimenv Keyboard_0              // Keyboard 0 and )
Keyboard_0 = 39
Dimenv Keyboard_ENTER          // Keyboard ENTER
Keyboard_ENTER = 40
Dimenv Keyboard_ESCAPE         // Keyboard ESCAPE
Keyboard_ESCAPE = 41
Dimenv Keyboard_Backspace      // Keyboard Backspace
Keyboard_Backspace = 42
Dimenv Keyboard_Tab            // Keyboard Tab
Keyboard_Tab = 43
Dimenv Keyboard_KongGe         // Keyboard Spacebar
Keyboard_KongGe = 44
Dimenv Keyboard_JianHao        // Keyboard - and _(underscore)
Keyboard_JianHao = 45
Dimenv Keyboard_DengHao        // Keyboard = and +
Keyboard_DengHao = 46
Dimenv Keyboard_ZuoZhongKuoHao // Keyboard [ and {
Keyboard_ZuoZhongKuoHao = 47
Dimenv Keyboard_YouZhongKuoHao // Keyboard ] and }
Keyboard_YouZhongKuoHao = 48
Dimenv Keyboard_FanXieGang     // Keyboard \ and |
Keyboard_FanXieGang = 49
Dimenv Keyboard_FenHao         // Keyboard ; and :
Keyboard_FenHao = 51
Dimenv Keyboard_DanYinHao      // Keyboard ‘ and “
Keyboard_DanYinHao = 52
Dimenv Keyboard_BoLangXian     // Keyboard `(Grave Accent) and ~(Tilde)
Keyboard_BoLangXian = 53
Dimenv Keyboard_Douhao         // Keyboard, and <
Keyboard_Douhao = 54
Dimenv Keyboard_JuHao          // Keyboard . and >
Keyboard_JuHao = 55
Dimenv Keyboard_XieGang_WenHao // Keyboard / and ?
Keyboard_XieGang_WenHao = 56
Dimenv Keyboard_CapsLock       // Keyboard Caps Lock
Keyboard_CapsLock = 57
Dimenv Keyboard_F1             // Keyboard F1
Keyboard_F1 = 58
Dimenv Keyboard_F2             // Keyboard F2
Keyboard_F2 = 59
Dimenv Keyboard_F3             // Keyboard F3
Keyboard_F3 = 60
Dimenv Keyboard_F4             // Keyboard F4
Keyboard_F4 = 61
Dimenv Keyboard_F5             // Keyboard F5
Keyboard_F5 = 62
Dimenv Keyboard_F6             // Keyboard F6
Keyboard_F6 = 63
Dimenv Keyboard_F7             // Keyboard F7
Keyboard_F7 = 64
Dimenv Keyboard_F8             // Keyboard F8
Keyboard_F8 = 65
Dimenv Keyboard_F9             // Keyboard F9
Keyboard_F9 = 66
Dimenv Keyboard_F10            // Keyboard F10
Keyboard_F10 = 67
Dimenv Keyboard_F11            // Keyboard F11
Keyboard_F11 = 68
Dimenv Keyboard_F12            // Keyboard F12
Keyboard_F12 = 69
Dimenv Keyboard_PrintScreen    // Keyboard PrintScreen
Keyboard_PrintScreen = 70
Dimenv Keyboard_ScrollLock     // Keyboard Scroll Lock
Keyboard_ScrollLock = 71
Dimenv Keyboard_Pause          // Keyboard Pause
Keyboard_Pause = 72
Dimenv Keyboard_Insert         // Keyboard Insert
Keyboard_Insert = 73
Dimenv Keyboard_Home           // Keyboard Home
Keyboard_Home = 74
Dimenv Keyboard_PageUp         // Keyboard PageUp
Keyboard_PageUp = 75
Dimenv Keyboard_Delete         // Keyboard Delete Forward
Keyboard_Delete = 76
Dimenv Keyboard_End            // Keyboard End
Keyboard_End = 77
Dimenv Keyboard_PageDown       // Keyboard PageDown
Keyboard_PageDown = 78
Dimenv Keyboard_RightArrow     // Keyboard RightArrow
Keyboard_RightArrow = 79
Dimenv Keyboard_LeftArrow      // Keyboard LeftArrow
Keyboard_LeftArrow = 80
Dimenv Keyboard_DownArrow      // Keyboard DownArrow
Keyboard_DownArrow = 81
Dimenv Keyboard_UpArrow        // Keyboard UpArrow
Keyboard_UpArrow = 82
Dimenv Keypad_NumLock          // Keypad Num Lock and Clear
Keypad_NumLock = 83
Dimenv Keypad_ChuHao           // Keypad /
Keypad_ChuHao = 84
Dimenv Keypad_ChengHao         // Keypad *
Keypad_ChengHao = 85
Dimenv Keypad_JianHao          // Keypad -
Keypad_JianHao = 86
Dimenv Keypad_JiaHao           // Keypad +
Keypad_JiaHao = 87
Dimenv Keypad_ENTER            // Keypad ENTER
Keypad_ENTER = 88
Dimenv Keypad_1_and_End        // Keypad 1 and End
Keypad_1_and_End = 89
Dimenv Keypad_2_and_DownArrow  // Keypad 2 and Down Arrow
Keypad_2_and_DownArrow = 90
Dimenv Keypad_3_and_PageDn     // Keypad 3 and PageDn
Keypad_3_and_PageDn = 91
Dimenv Keypad_4_and_LeftArrow  // Keypad 4 and Left Arrow
Keypad_4_and_LeftArrow = 92
Dimenv Keypad_5                // Keypad 5
Keypad_5 = 93
Dimenv Keypad_6_and_RightArrow // Keypad 6 and Right Arrow
Keypad_6_and_RightArrow = 94
Dimenv Keypad_7_and_Home       // Keypad 7 and Home
Keypad_7_and_Home = 95
Dimenv Keypad_8_and_UpArrow    // Keypad 8 and Up Arrow
Keypad_8_and_UpArrow = 96
Dimenv Keypad_9_and_PageUp     // Keypad 9 and PageUp
Keypad_9_and_PageUp = 97
Dimenv Keypad_0_and_Insert     // Keypad 0 and Insert
Keypad_0_and_Insert = 98
Dimenv Keypad_Dian_and_Delete  // Keypad . and Delete
Keypad_Dian_and_Delete = 99
Dimenv Keyboard_LeftControl
Keyboard_LeftControl = 224
Dimenv Keyboard_LeftShift
Keyboard_LeftShift = 225
Dimenv Keyboard_LeftAlt
Keyboard_LeftAlt = 226
Dimenv Keyboard_LeftWindows
Keyboard_LeftWindows = 227
Dimenv Keyboard_RightControl
Keyboard_RightControl = 228
Dimenv Keyboard_RightShift
Keyboard_RightShift = 229
Dimenv Keyboard_RightAlt
Keyboard_RightAlt = 230
Dimenv Keyboard_RightWindows
Keyboard_RightWindows = 231
'■■■■■■■■■■■■■■■■■■■■↑按键定义↑■■■■■■■■■■■■■■■■■■■■
Global M_Handle
UserVar X_pos=0 "x坐标"
UserVar Y_pos=0 "y坐标"
Event Form1.Load
    M_Handle = -1
End Event
Event Form1.OpenPort.Click
    If M_Handle > 0 Then
        MsgBox "端口已经打开，请不要重复打开端口。请关闭端口后才能再次打开端口!"
        EndScript
    End If
    M_Handle = M_Open(1)
    If M_Handle < 0 Then
        MsgBox "端口打开失败，请检查是否已经插上模块!"
        EndScript
    Else 
        Form1.OpenPort.Enabled = 0
        Form1.OpenVidPid.Enabled = 0
    End If
End Event
Event Form1.OpenVidPid.Click
    If M_Handle > 0 Then
        MsgBox "端口已经打开，请不要重复打开端口。请关闭端口后才能再次打开端口!"
        EndScript
    End If
    Dim UserVid, UserPid
    UserVid = 49686'按键精灵没有无符号数，请先用计算器将十六进制数转成十进制数，比如这里十六进制的C216转成十进制就是49686
    UserPid = 769'按键精灵没有无符号数，请先用计算器将十六进制数转成十进制数，比如这里十六进制的0301转成十进制就是769
    M_Handle = M_Open_VidPid(UserVid, UserPid)'单头盒子的默认VID PID是(&HC216, &H0301);双头盒子的默认VID PID是(&HC216, &H0102)；&H是表示十六进制
    If M_Handle < 0 Then
        MsgBox "端口打开失败，请检查是否已经插上模块!"
        EndScript
    Else 
        Form1.OpenPort.Enabled = 0
        Form1.OpenVidPid.Enabled = 0
    End If
End Event
Event Form1.ClosePort.Click
    Form1.OpenPort.Enabled = 1
    Form1.OpenVidPid.Enabled = 1
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        Goto err
    End If
    Traceprint M_Close(M_Handle)
    M_Handle = - 1 
    rem err
End Event
Event Form1.KeyPress_Test.Click
    Dim KeyCode
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //这里延时只是为了方便调试，实际程序根据需要决定是否延时
    Traceprint M_DelayRandom(500, 800)
    //单击按键a两次
    KeyCode = Keyboard_a
    TracePrint M_KeyPress(M_Handle, KeyCode, 2)  //这里使用USB HID键盘码
    //Ctrl+a
    Traceprint M_KeyDown(M_Handle, Keyboard_LeftControl) //这里使用USB HID键盘码
    Traceprint M_KeyDown2(M_Handle, 65)  //A的按键码是65 这里使用按键精灵自带的键盘码
    TracePrint M_DelayRandom(80, 200)
    //Delete
    Traceprint M_KeyDown2(M_Handle, 46) //Delete的按键码46  这里使用按键精灵自带的键盘码
    //Traceprint M_KeyUp(M_Handle, Keyboard_Delete)
    TracePrint M_ReleaseAllKey(M_Handle)
End Event
Event Form1.KeyState_Test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //读取当前的鼠标坐标
    Ret = M_KeyState(M_Handle, Keyboard_a) //这里使用USB HID键盘码
    MsgBox "Keyboard_a的状态=" & Ret
    //读取当前的鼠标坐标 A的按键码是65
    Ret = M_KeyState2(M_Handle, 65)   //A的按键码是65 这里使用按键精灵自带的键盘码
    MsgBox "按键A的状态=" & Ret
End Event
Event Form1.KeyInputString_Test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //这里延时只是为了方便调试，实际程序根据需要决定是否延时
    TracePrint M_DelayRandom(500, 800)
    TestStr = Form1.InputText.Text
    strlend = Len(TestStr) * 2  //因为按键精灵的String是unicode编码，长度要*2
    TracePrint M_KeyInputStringUnicode(M_Handle, TestStr, strlend)
    TracePrint M_KeyInputStringUnicode(M_Handle, "文盒ABC", 3*2)
End Event
Event Form1.NumLockLedState_Test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //读取当前的鼠标坐标
    Ret = M_NumLockLedState(M_Handle)
    MsgBox "小键盘LED的状态=" & Ret
End Event
Event Form1.LeftClick_test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //这里延时只是为了方便调试，实际程序根据需要决定是否延时
    Traceprint M_DelayRandom(500, 800)
    //单击鼠标左键 2次
    Traceprint M_LeftClick(M_Handle, 2)
End Event
Event Form1.RightClick_test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //这里延时只是为了方便调试，实际程序根据需要决定是否延时
    Traceprint M_DelayRandom(500, 800)
    //单击鼠标右键 1次
    Traceprint M_RightClick(M_Handle, 1)
End Event
Event Form1.Wheel_test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //这里延时只是为了方便调试，实际程序根据需要决定是否延时
    Traceprint M_DelayRandom(500, 800)
    //滚轮向上滚动3个齿
    Traceprint M_MouseWheel(M_Handle, 3)
    //滚轮向下滚动5个齿
    Traceprint M_MouseWheel(M_Handle, -5)
End Event
Event Form1.MoveR_test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //鼠标相对移动
    Traceprint M_MoveR(M_Handle, 50, -100)
End Event
Event Form1.MoveTo_test.Click
    Dim xpos, ypos
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //鼠标移动到指定坐标
    xpos = 50
    ypos = 100
    //TracePrint M_MoveTo(M_Handle, 50, 100)
    Traceprint M_MoveTo(M_Handle, xpos, ypos)
End Event
Event Form1.GetPos_test.Click
    //注意：由于按键精灵不支持ByRef，无法调用msdk中的M_GetCurrMousePos/M_GetCurrMousePos2接口。请使用M_GetCurrMousePosX/M_GetCurrMousePosY接口
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //读取当前的鼠标坐标
    Traceprint M_GetCurrMousePos(M_Handle, X_pos, Y_pos)
    MsgBox "x=" & X_pos & ", y=" & Y_pos
End Event
Event Form1.MoveR2_test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //鼠标相对移动
    Traceprint M_MoveR2(M_Handle, 50, -100)
End Event
Event Form1.MoveTo2_test.Click
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //鼠标移动到指定坐标
    TracePrint M_MoveTo2(M_Handle, 50, 100)
End Event
Event Form1.GetPos2_test.Click
    //注意：由于按键精灵不支持ByRef，无法调用msdk中的M_GetCurrMousePos/M_GetCurrMousePos2接口。请使用M_GetCurrMousePosX/M_GetCurrMousePosY接口
    If M_Handle < 0 Then
        MsgBox "端口还没有打开，请插上模块，打开端口!"
        EndScript
    End If
    //读取当前的鼠标坐标
    GetCursorPos x,y
    MsgBox "x=" & x & ", y=" & y
End Event
